
-----------------------------------------------------------------
Algorithm 1: Search BST for Word
-----------------------------------------------------------------
procedure lookup(BST_NODE n, String key) 
	if (n is null) then
		Word not found
	end if
	
	if (key of node n is equals to given key) then
		Word found
	end if
	
	if (given key is smaller then key of current node) then
	
		try comparing with the node left of current node
		lookup(n.getLeft(), k);
	end if
	
	else if(given key is bigger then key of current node) then
		try comparing with the node right of current node
		lookup(n.getRight(), k);
	end else if
end procedure

-----------------------------------------------------------------
Algorithm 2: Count Frequency
-----------------------------------------------------------------
procedure getInputFreqMap(String inputFilePath, BSTree dictionary) 
	Create TreeMap<String, Integer> to store the words in the dictionary with its frequency;
	
	Read input file;
	
	while (getting words from input file) 
		String s = one of the words from input file;
		
		String s_low = word in lowercase;
		
		s_low = remove all punction marks; 
			
		if(word is in the dicitonary) then
			if(word is not in treeMap) then
				add word to treeMap with frequency 1 
			end if
			if(word is  already in treeMap) then 
				add one to its frequency
			end if
		end if
	end while
	return treeMap
end procedure

-----------------------------------------------------------------
Algorithm 3: Correcting Space Removed Words
-----------------------------------------------------------------
procedure TreeMap<String, Integer> addSpaceRemovedWords(TreeMap<String, Integer> freqMap, List<String> wordsNotDictionary, BSTree dictionary)
	Create List<String> to store the legal words in the space removed string.
	
	for (every word not detected in the dictionary) 
		s = a word not detected
		s = remove all punctions
		
		for (every single possible substring of the string) 
			String substring = possible substring;
			
			if(substring is in the dictionary)
				if(substring is not already in the list of possible words for this string)
					add word to list
				end if
			end if
		end for
		
		for (every word detected)
			for(every other word detected)
				
				if(A detected word is made of another detected word, and its a different word)
					remove word contained in first word;
				end if
			end for
		end for
		
		if(list is not empty)
			write the original word and its derived words in a text file;
		end if
		
		for(all newly derived words)
			add to freqMap
		end for
		
		empty list of words for next word
	end for
	
	Stop writing output file and close file.
	
	return updated freqMap;
end procedure


-----------------------------------------------------------------
Algorithm 4: Correcting Mutated Words
-----------------------------------------------------------------
procedure addMutatedWords(TreeMap<String, Integer> freqMap, List<String> wordsNotDictionary, BSTree dictionary)
	Create List<String> to store the legal words corrected from mutated words.	
	
	for (every word not detected in the dictionary) 
		
		for (every character in the word) 
			for (every letter of the alphabet) 
				
				change the current character to the current letter of the alphabet
				
				if(new word is in dictionary)
					if(list of words is empty, because we only want one solution)
						add new word to word list
						add new word to freqMap 
					end if
				end if
			end for
		end for
		
		if(word list is not empty)
			write the original word and its derived words in a text file;
		end if
		
		empty list of words for next word
	end for
	
	Stop writing output file and close file.
	
	return updated freqMap;
end procedure













 


























	
	
	
	
	
	
	
	
	
	
	